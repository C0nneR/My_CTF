# from z3 import *

# s = Solver()
# Seed = BitVec('passwd', 64)
# v2 = (Seed % 0x2540BE3FF) & 0xff
# v3 = ((Seed % 0x2540BE3FF) >> 8) & 0xF
# v4 = ((Seed % 0x2540BE3FF) >> 20) & 0xFFF
# v5 = v2 + 1
# v6 = ((Seed % 0x2540BE3FF) >> 12) & 0xff
# v7 = v3 + 1
# v8 = v4 + ~v2
# v9 = v4
# v10 = 21 * v6
# for i in range(16):
#   v3 += v3 ^ v8
#   v2 += v4 | v2 & v7
#   v9 += (v10 + v9) % v5
#   v6 += v6 / v7

# s.add(v3 == 0x38006F1)
# s.add(v2 == 0x7291)
# s.add(v9 == 0x8B3)
# s.add(v6 == 0x80)
# s.add(Seed > 0, Seed <= 0xffffffff)

# if s.check() == sat:
#     print(s.model())
# else:
#     print('Not Found!')

password1 = 'r3_1'

# import angr

# opcode = [126, 147, 203, 166, 119, 161, 67, 203, 183, 5, 130, 131, 75, 151, 214, 116, 238, 9, 182, 8, 109, 160, 70, 191, 3, 92, 142, 150, 59, 5, 198, 162, 56, 142, 39, 65, 88, 109, 101, 30, 11, 135, 102, 50, 63, 67, 219, 213, 213, 19, 249, 189, 237, 158, 113, 246, 201, 90, 88, 97, 141, 132, 224, 161, 238, 18, 111, 25, 189, 251, 153, 158, 72, 59, 89, 67, 165, 130, 246, 62, 52, 31, 28, 41, 72, 227, 27, 151, 102, 148, 253, 230, 250, 142, 101, 107, 158, 46, 210, 23, 113, 52, 182, 132, 44, 135, 79, 31, 253, 110, 185, 224, 227, 37, 217, 16, 245, 245, 56, 210, 115, 162, 26, 171, 140, 182, 13, 11, 168, 139, 147, 231, 99, 190, 101, 9, 213, 236, 49, 178, 143, 247, 152, 29, 126, 206, 151, 52, 18, 75, 7, 180, 13, 98, 139, 252, 138, 198, 250, 249, 166, 138, 170, 213, 208, 100, 217, 195, 240, 82, 38, 26, 240, 72, 107, 176, 94, 132, 153, 212, 193, 37, 12, 102, 156, 56, 87, 40, 229, 24, 107, 192, 245, 220, 161, 104, 189, 178, 196, 67, 176, 165, 240, 5, 173, 242, 50, 46, 38, 152, 141, 219, 103, 145, 156, 204, 71, 8, 39, 67, 123, 59, 147, 150, 103, 43, 61, 51, 95, 31, 92, 182, 254, 172, 170, 175, 221, 134, 101, 23, 133, 12, 117, 217, 22, 108, 82, 4, 94, 198, 201, 43, 219, 247, 201, 46, 248, 116, 225, 7, 146, 121, 138, 51, 67, 95, 220, 42, 237, 252, 117, 50, 17, 147, 177, 222, 242, 215, 246, 13, 230, 110, 147, 114, 108, 226, 206, 188, 200, 231, 233, 113, 21, 218, 4, 161, 192, 233, 79, 246, 152, 91, 8, 10, 140, 82, 203, 128, 150, 154, 164, 177, 26, 97, 175, 41, 187, 92, 222, 243, 86, 103, 43, 75, 20, 202, 118, 36, 66, 148, 150, 154, 22, 39, 99, 137, 185, 50, 6, 81, 83, 199, 177, 11, 187, 232, 47, 33, 71, 23, 134, 74, 171, 186, 68, 8, 225, 213, 97, 111, 95, 205, 193, 77, 229, 191, 153, 181, 234, 22, 82, 49, 248, 232, 119, 22, 160, 116, 234, 170, 217, 100, 83, 142, 43, 228, 31, 20, 14, 154, 130, 22, 43, 156, 144, 145, 106, 137, 195, 80, 196, 244, 215, 144, 73, 212, 245, 229, 12, 145, 145, 244, 78, 168, 40, 211, 115, 80, 18, 97, 33, 28, 37, 232, 12, 106, 137, 173, 146, 50, 205, 99, 76, 21, 190, 196, 86, 221, 24, 99, 23, 212, 37, 0, 201, 83, 206, 146, 74, 187, 251, 50, 158, 53, 135, 146, 69, 154, 8, 138, 70, 205, 3, 112, 64, 236, 198, 51, 185, 155, 250, 105, 53, 239, 218, 91, 87, 22, 186, 107, 124, 40, 72, 162, 69, 66, 112, 218, 189, 245, 81, 8, 175, 110, 23, 112, 47, 220, 134, 221, 172, 142, 201, 237, 19, 106, 88, 182, 29, 69, 38, 181, 48, 95, 21, 226, 252, 58, 223, 144, 171, 153, 14, 106, 243, 7, 35, 100, 201, 56, 22, 89, 129, 113, 48, 197, 42, 75, 235, 136, 225, 216, 34, 232, 243, 68, 87, 180, 21, 80, 9, 103, 111, 132, 169, 20, 65, 115, 205, 171, 61, 155, 114, 12, 190, 218, 88, 129, 168, 135, 44, 193, 240, 228, 47, 115, 72, 180, 171, 124, 31, 170, 154, 5, 113, 131, 232, 99, 250, 229, 68, 142, 60, 46, 32, 95, 4, 244, 154, 77, 90, 84, 85, 141, 215, 86, 207, 209, 96, 64, 20, 171, 40, 39, 145, 238, 51, 252, 202, 203, 10, 43, 95, 208, 242, 64, 216, 69, 195, 209, 44, 142, 189, 194, 247, 105, 222, 83, 85, 46, 54, 143, 110, 134, 124, 173, 101, 172, 233, 191, 224, 40, 241, 163, 200, 173, 52, 175, 124, 22, 9, 209, 152, 117, 11, 42, 62, 39, 98, 14, 174, 130, 164, 174, 249, 49, 191, 238, 248, 195, 196, 193, 170, 33, 192, 86, 233, 110, 158, 165, 212, 250, 178, 138, 28, 248, 29, 53, 86, 159, 203, 188, 68, 169, 14, 175, 180, 31, 241, 127, 201, 244, 109, 238, 104, 238, 45, 120, 107, 133, 170, 43, 157, 146, 34, 101, 196, 140, 174, 165, 215, 107, 28, 166, 130, 169, 123, 134, 5, 238, 198, 114, 185, 216, 18, 29, 71, 240, 123, 19, 56, 233, 194, 72, 81, 91, 98, 137, 6, 211, 209, 105, 200, 100, 218, 192, 140, 150, 215, 128, 6, 10, 185, 199, 254, 208, 28, 3, 225, 246, 130, 93, 63, 188, 145, 186, 50, 196, 199, 23, 164, 36, 67, 125, 233, 84, 175, 210, 16, 49, 15, 205, 111, 103, 42, 25, 167, 180, 99, 20, 125, 120, 140, 253, 241, 74, 78, 24, 37, 43, 177, 233, 87, 149, 92, 147, 88, 26, 129, 18, 150, 165, 127, 155, 179, 178, 146, 198, 16, 52, 213, 253, 236, 42, 52, 96, 183, 66, 69, 242, 51, 28, 140, 88, 201, 89, 227, 221, 76, 157, 157, 134, 232, 10, 125, 162, 17, 69, 131, 128, 113, 85, 33, 66, 224, 217, 198, 57, 231, 163, 145, 105, 36, 152, 22, 62, 164, 62, 145, 209, 213, 21, 227, 8, 36, 34, 230, 120, 164, 228, 237, 242, 115, 86, 50, 143, 252, 158, 242, 163, 81, 243, 76, 117, 123, 18, 91, 4, 99, 62, 154, 153, 41, 13, 97, 129, 193, 167, 6, 8, 15, 176, 49, 157, 252, 126, 175, 6, 177, 230, 55, 142, 152, 175, 61, 74, 168, 67, 215, 52, 249, 197, 224, 167, 19, 192, 106, 55, 98, 205, 105, 233, 158, 234, 71, 21, 199, 2, 146, 231, 41, 168, 80, 49, 8, 25, 134, 47, 238, 137, 22, 250, 112, 233, 101, 253, 220, 168, 180, 245, 126, 106, 63, 68, 18, 134, 229, 191, 212, 91, 115, 198, 189, 98, 62, 196, 42, 200, 32, 235, 33, 28, 246, 32, 22, 6, 75, 242, 164, 10, 205, 40, 220, 209, 173, 39, 203, 112, 11, 129, 169, 206, 69, 80, 92, 87, 137, 19, 223, 238, 167, 113, 124, 171, 175, 128, 182, 85, 105, 188, 99, 138, 173, 47, 98, 66, 124, 195, 100, 159, 101, 96, 113, 225, 27, 136, 158, 107, 105, 191, 13, 68, 71, 218, 160, 116, 144, 204, 35, 57, 172, 220, 160, 245, 222, 126, 253, 156, 129, 217, 228, 137, 146, 146, 18, 216, 58, 116, 125, 75, 164, 119, 247, 192, 57, 17, 227, 163, 109, 137, 195, 119, 231, 246, 131, 248, 76, 167, 50, 49, 208, 189, 99, 75, 114, 72, 254, 65, 139, 249, 146, 115, 67, 118, 228, 164, 38, 52, 150, 206, 132, 27, 120, 183, 81, 86, 175, 110, 243, 150, 250, 205, 122, 50, 86, 62, 79, 199, 68, 142, 32, 6, 6, 1, 217, 179, 151, 223, 167, 200, 189, 230, 239, 129, 49, 245, 212, 174, 246, 213, 219, 117, 92, 54]
# proj = angr.Project("safe box.exe", load_options = {"auto_load_libs": False}, main_opts = {"base_addr": 0x140000000})
# state = proj.factory.blank_state(addr = 0x14000137D, add_options = angr.options.unicorn)
# state.regs.rbp = 0x20000000
# state.regs.rsp = 0x10000000
# state.regs.r14 = 0

# rbp = 0x20000000
# state.memory.store(rbp + 0x610, b'\x00' * 0x200)
# state.memory.store(rbp + 0x810, b'\x00' * 0x800)
# state.memory.store(rbp + 0x810, bytes(opcode))

# simgr = proj.factory.simgr(state)
# simgr.explore(find = 0x1400014b5)
# found = simgr.found[-1]
# print(found.solver.eval(found.memory.load(rbp + 0x810, 0x4a0), cast_to = bytes))

# to_patch = b'\x8b\\$@H\x8bl$HH\x8bt$PH\x8b|$XH\x83\xc4 A_A^A\\\xe9)\x05\x00\x003\xc9\xff\x15A)\x00\x00\xccH\x89\\$\x08H\x89|$\x10D\x8b\nH\x8d=$h\x00\x00\x8bB\x04E3\xd2L\x8b\xdaE\x8b\xc2A\x8dZ\x02\x0f\x1f@\x00\x0f\x1f\x84\x00\x00\x00\x00\x00A\x83\xe0\x03\x8b\xc8\xc1\xe1\x05\x8b\xd0\xc1\xea\x063\xd1B\x8b\x0c\x87\x03\xd0A\x03\xcaA\x81\xc2xV4\x123\xd1E\x8b\xc2D\x03\xcaA\x83\xe0\x03A\x8b\xc9A\x8b\xd1\xc1\xe1\x05\xc1\xea\x063\xd1A\x8b\xcaH\xc1\xe9\x0bA\x03\xd1\x83\xe1\x03\x8b\x0c\x8fA\x03\xca3\xd1\x03\xc2\x8b\xc8\x8b\xd0\xc1\xe1\x05\xc1\xea\x063\xd1B\x8b\x0c\x87A\x03\xca\x03\xd03\xd1A\x81\xc2xV4\x12D\x03\xcaE\x8b\xc2A\x8b\xc9A\x83\xe0\x03\xc1\xe1\x05A\x8b\xd1\xc1\xea\x063\xd1A\x8b\xcaH\xc1\xe9\x0bA\x03\xd1\x83\xe1\x03\x8b\x0c\x8fA\x03\xca3\xd1\x03\xc2\x8b\xc8\x8b\xd0\xc1\xe1\x05\xc1\xea\x063\xd1B\x8b\x0c\x87A\x03\xca\x03\xd03\xd1A\x81\xc2xV4\x12D\x03\xcaE\x8b\xc2A\x8b\xc9A\x8b\xd1\xc1\xe1\x05\xc1\xea\x063\xd1A\x8b\xcaH\xc1\xe9\x0bA\x03\xd1\x83\xe1\x03\x8b\x0c\x8fA\x03\xca3\xd1\x03\xc2\x8b\xd0\x8b\xc8\xc1\xea\x06\xc1\xe1\x05A\x83\xe0\x033\xd1\x03\xd0B\x8b\x0c\x87A\x03\xcaA\x81\xc2xV4\x123\xd1E\x8b\xc2D\x03\xcaA\x83\xe0\x03A\x8b\xc9A\x8b\xd1\xc1\xe1\x05\xc1\xea\x063\xd1A\x8b\xcaH\xc1\xe9\x0bA\x03\xd1\x83\xe1\x03\x8b\x0c\x8fA\x03\xca3\xd1\x03\xc2\x8b\xc8\x8b\xd0\xc1\xe1\x05\xc1\xea\x063\xd1B\x8b\x0c\x87A\x03\xca\x03\xd03\xd1A\x81\xc2xV4\x12D\x03\xcaE\x8b\xc2A\x8b\xc9A\x83\xe0\x03\xc1\xe1\x05A\x8b\xd1\xc1\xea\x063\xd1A\x8b\xcaH\xc1\xe9\x0bA\x03\xd1\x83\xe1\x03\x8b\x0c\x8fA\x03\xca3\xd1\x03\xc2\x8b\xc8\x8b\xd0\xc1\xe1\x05\xc1\xea\x063\xd1B\x8b\x0c\x87A\x03\xca\x03\xd03\xd1A\x81\xc2xV4\x12D\x03\xcaE\x8b\xc2A\x8b\xc9A\x8b\xd1\xc1\xe1\x05\xc1\xea\x063\xd1A\x8b\xcaH\xc1\xe9\x0bA\x03\xd1\x83\xe1\x03\x8b\x0c\x8fA\x03\xca3\xd1\x03\xc2\x8b\xd0\x8b\xc8\xc1\xea\x06\xc1\xe1\x053\xd1\x03\xd0A\x83\xe0\x03B\x8b\x0c\x87A\x03\xcaA\x81\xc2xV4\x123\xd1E\x8b\xc2D\x03\xcaA\x83\xe0\x03A\x8b\xc9A\x8b\xd1\xc1\xe1\x05\xc1\xea\x063\xd1A\x8b\xcaH\xc1\xe9\x0bA\x03\xd1\x83\xe1\x03\x8b\x0c\x8fA\x03\xca3\xd1\x03\xc2\x8b\xc8\x8b\xd0\xc1\xe1\x05\xc1\xea\x063\xd1B\x8b\x0c\x87A\x03\xca\x03\xd03\xd1A\x81\xc2xV4\x12D\x03\xcaE\x8b\xc2A\x83\xe0\x03A\x8b\xc9\xc1\xe1\x05A\x8b\xd1\xc1\xea\x063\xd1A\x8b\xcaH\xc1\xe9\x0bA\x03\xd1\x83\xe1\x03\x8b\x0c\x8fA\x03\xca3\xd1\x03\xc2\x8b\xc8\x8b\xd0\xc1\xe1\x05\xc1\xea\x063\xd1B\x8b\x0c\x87A\x03\xca\x03\xd03\xd1A\x81\xc2xV4\x12D\x03\xcaE\x8b\xc2A\x8b\xc9A\x83\xe0\x03\xc1\xe1\x05A\x8b\xd1\xc1\xea\x063\xd1A\x8b\xcaH\xc1\xe9\x0bA\x03\xd1\x83\xe1\x03\x8b\x0c\x8fA\x03\xca3\xd1\x03\xc2\x8b\xd0\x8b\xc8\xc1\xea\x06\xc1\xe1\x053\xd1B\x8b\x0c\x87\x03\xd0A\x03\xca3\xd1A\x81\xc2xV4\x12D\x03\xcaE\x8b\xc2A\x83\xe0\x03A\x8b\xc9\xc1\xe1\x05A\x8b\xd1\xc1\xea\x063\xd1A\x8b\xcaH\xc1\xe9\x0bA\x03\xd1\x83\xe1\x03\x8b\x0c\x8fA\x03\xca3\xd1\x03\xc2\x8b\xc8\x8b\xd0\xc1\xe1\x05\xc1\xea\x063\xd1B\x8b\x0c\x87A\x03\xca\x03\xd03\xd1A\x81\xc2xV4\x12D\x03\xcaE\x8b\xc2A\x8b\xc9A\x83\xe0\x03\xc1\xe1\x05A\x8b\xd1\xc1\xea\x063\xd1A\x8b\xcaH\xc1\xe9\x0bA\x03\xd1\x83\xe1\x03\x8b\x0c\x8fA\x03\xca3\xd1\x03\xc2\x8b\xc8\x8b\xd0\xc1\xe1\x05\xc1\xea\x063\xd1B\x8b\x0c\x87A\x03\xca\x03\xd03\xd1A\x81\xc2xV4\x12D\x03\xcaE\x8b\xc2A\x8b\xc9A\x8b\xd1\xc1\xe1\x05A\x83\xe0\x03\xc1\xea\x063\xd1A\x8b\xcaH\xc1\xe9\x0bA\x03\xd1\x83\xe1\x03\x8b\x0c\x8fA\x03\xca3\xd1\x03\xc2\x8b\xd0\x8b\xc8\xc1\xea\x06\xc1\xe1\x053\xd1B\x8b\x0c\x87A\x03\xca\x03\xd03\xd1D\x03\xcaA\x81\xc2xV4\x12E\x8b\xc2A\x8b\xc9\xc1\xe1\x05A\x83\xe0\x03A\x8b\xd1\xc1\xea\x063\xd1A\x8b\xcaA\x03\xd1H\xc1\xe9\x0b\x83\xe1\x03\x8b\x0c\x8fA\x03\xca3\xd1\x03\xc2\x8b\xc8\x8b\xd0\xc1\xe1\x05\xc1\xea\x063\xd1B\x8b\x0c\x87A\x03\xca\x03\xd03\xd1A\x81\xc2xV4\x12D\x03\xcaE\x8b\xc2A\x83\xe0\x03A\x8b\xc9\xc1\xe1\x05A\x8b\xd1\xc1\xea\x063\xd1A\x8b\xcaA\x03\xd1H\xc1\xe9\x0b\x83\xe1\x03\x8b\x0c\x8fA\x03\xca3\xd1\x03\xc2\x8b\xc8\x8b\xd0\xc1\xea\x06\xc1\xe1\x053'

# import idaapi

# start = 0x140001855
# for i in range(0x4a0):
#     patch_addr = start + i
#     idaapi.patch_byte(patch_addr, to_patch[i])

# import ctypes

# cipher = [0x36C128C5, 0xC4799A63, 0xE8013E6C, 0xA9F49003, 0x607EF54A, 0x542C2DDF, 0x558BD01C, 0x65512CA2, 0xBE1E3D05, 0x3C467DAD]

# key = [ord("G"), ord("W"), ord("H"), ord("T")]

# def xtea_decrypt(cipher, key, round):
#     y, z = [ctypes.c_uint32(x) for x in cipher]

#     delta = 0x12345678
#     sum_val = ctypes.c_uint32(0)
#     sum_val.value = delta * round

#     for i in range(round):
#         z.value -= (((y.value << 5) ^ (y.value >> 6)) + y.value) ^ (sum_val.value + key[(sum_val.value >> 11) & 3])
#         sum_val.value -= delta
#         y.value -= (((z.value << 5) ^ (z.value >> 6)) + z.value) ^ (sum_val.value + key[sum_val.value & 3])

#     return [y.value, z.value]

# password2 = ''
# for i in range(5):
#     ret = xtea_decrypt(cipher[i * 2: i * 2 + 2], key, 32)
#     for num in ret:
#         password2 += chr(num)

# print(password2)
password2 = 'S_s0_fuNny'

rand = [0x4147, 0x2f06, 0x5017, 0x7d6c, 0x1583, 0x37ea, 0x6fdc, 0xd03, 0x3f43, 0x4156, 0xed7, 0x1094, 0x5c4f, 0x173f, 0x193a, 0x1357]

encoded = [0x4118, 0x2f62, 0x5027, 0x7d33, 0x15da, 0x3785, 0x6f89, 0xd5c, 0x3f72, 0x413f, 0xebc, 0x10a7, 0x5c10, 0x174b, 0x190a, 0x1338]

shuffled_encoded = [0x10a7, 0x3f72, 0x413f, 0x2f62, 0x15da, 0x5c10, 0x174b, 0x6c6b, 0x37da, 0x3653,
                    0x1204, 0x1d0, 0x19e3, 0x349e, 0x60e2, 0x40bf, 0x1b1d, 0x6f89, 0xd5c, 0x7d33,
                    0x3785, 0xebc, 0x4118, 0x5027, 0x190a, 0x1338, 0x74f7, 0x4350, 0x3797, 0x1dbb,
                    0x2457, 0x1f98]

cipher = [0x000010A7, 0x00003F72, 0x0000413F, 0x00002F62, 0x000015DA, 0x00005C10, 0x0000174B, 0x00006C6B, 0x000037DA, 0x00003653, 0x00001204, 0x000001D0, 0x000019E3, 0x0000349E, 0x000060E2, 0x000040BF, 0x00001B1D, 0x00006F89, 0x00000D5C, 0x00007D33, 0x00003785, 0x00000EBC, 0x00004118, 0x00005027, 0x0000190A, 0x00001338, 0x000074F7, 0x00004350, 0x00003797, 0x00001DBB, 0x00002457, 0x00001F98]
index_list = []
for num in encoded:
    index_list.append(shuffled_encoded.index(num))

useful_cipher = []
for i in index_list:
    useful_cipher.append(cipher[i])

password3 = ''
for i in range(16):
    password3 += chr((rand[i] ^ useful_cipher[i]) & 0xff)
print(password3)

password3 = '_d0_YoU_1ik3_t0o'